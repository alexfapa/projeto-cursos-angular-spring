-------------------------------Documentação projeto Angular-Spring----------------------------------------

Passo 01; 
	- verificar versão do node(este projeto foi feito com a versão v16.13.0):
		node --version 
	- verificar versão do angularCLI (este projeto foi feito com a versão 13.0.0):
		ng --version
	
Passo 02:
	- Criar o projeto;
		ng new <nomde do projeto>
	
	- obs.: caso não crie o arquivo app-routing.module.ts realizar o seguinte comando:
		ng new <nomde do projeto> --routing
	
	- Caso exija alguma confirmação ver a necessidade e selecionar o desejado
	- Rodas o projeto e verificar se está tudo ok:
		ng serve
	
Passo 03:
	- Adicionar o angular material ao projeto (linkdoc: https://material.angular.io/):
		ng add @angular/material
		
	- Obs: caso o comando acima não funcione, tentar pelo npm com o comando abaixo:
		npm install --save @angular/material @angular/cdk @angular/animations
		
		ng add @angular/material
		
Passo 04:
	- Adicionando toolbar;
		adicionar no arquivo app.module.ts a seguinte importação:
		 -- import { MatToolbarModule } from '@angular/material/toolbar';
		
		adicionar nos imports do arquivo app.module.ts:
		 -- MatToolbarModule
   
    - Pegar um exemplo do https://material.angular.io/ e adicionar o html no arquivo app.component.html(apagar todo o conteúdo do arquivo app.component.html):
		Exemplo simples:
			<mat-toolbar>
				<span>My Application</span>
			</mat-toolbar>
			
Passo 05:
	- Adicionando módulos e componentes:
		ng g m <nome do módulo>
		obs: g(signigica generate) e m(siginifica module)
		
	** - Para adicionar módulos com roteamento:
		ng g m <nome do módulo> --routing
	
	- Dentro do módulo courses adicionar o componente courses:
		ng g c <nome do modulo>/<nome do componente>
		
Passo 06:
	- No arquivo de rotas courses-routing.module.ts, adicionar a rota para o componente CousesComponent criado no passo anterior:
		Exemplo de como deve ficar o trecho das rotas no arquivo courses-routing.module.ts:
		````
			const routes: Routes = [
				{ path: '', component: CoursesComponent }
			];
		````

Passo 07: 
	- Adicionando uma tabela para exibição dos dados com Angular Material:
		- Acessando o link https://material.angular.io/components/table/overview deve ser copiado a importação para tabelas dentro do arquivo "courses.module.ts"
			import {MatTableModule} from '@angular/material/table';
		- Ainda no arquivo courses.module.ts adicionar no array de imports:
			MatTableModule

	- No arquivo courses.component.ts, adicionar um vetor para receber os dados que serão exibidos na tabela:
		Exemplo: courses: any[] = [];

	- Criar uma pasta courses/model
	- Gerar uma interface para ser utlizada na tabela e nela definir os dados do modelo para exibição na tabela:
		ng g interface courses/model/course
	- Após gerar a interface o exemplo do array "courses" criado acima ficará da seguinte forma:
		courses: Course[] = [];
		Observação: no exemplo acima o array está sendo inicializada, pois é obrigado realizar a inicialização;
		Observação: outra forma de inicializar o array é dentro do construtor;

	- Ajustar o arquivo courses.component.html para que fique de acordo com as variáveis criadas no arquivo courses.component.ts
		Observação: deve ser obedecida a nomenclatura das variáveis da interface e do arquivo courses.component.ts


Passo 08:
	- Adicionando um card do angular material
		No arquivo courses.module.ts e no array de importes do mesmo arquivo adicionar a importação:
			import {MatCardModule} from '@angular/material/card';
	- Adicionar a tag de card simples:
		<mat-card>Simple card</mat-card>
	- Inserir toda a tabela dentro da tag do card criada no item anterior
	- Iserir um toolbar acima da tabela dentro da tag <mat-card>

Passo 09:
	- Criando módulo para compartilhar as importações:
		ng g m shared/app-material
	
	- No arquivo app-material.module.ts apagar o array de imports e declarations e ainda apagar a importação do CommonModule;
	- Copiar as importações utilizadas no arquivo courses.module.ts e adicionar no array de exports dentro do @NgModule;

	- Apagar as importações do arquivo courses.module.ts que foram para o arquivo app-material.module.ts e adicionar somente a importação:
		import { AppMaterialModule } from '../shared/app-material/app-material.module';
	- No array de imports adicionar o AppMaterialModule

Passo 10:
	- Personalizando as cores do sistema com material design
		Fonte: https://material.io
	- No arquivo styles.scss(o projeto tem que ter como arquivo de estilo a extensão .scss) adicione:
		```
		   @import '@angular/material/theming';
		   @include mat-core();
		   
		   $custom-app-primary: mat-pallete($mat-blue);
		   $custom-app-secondary: mat-pallete($mat-indigo, A200, A400, 700);
		   $custom-app-warn: mat-pallete($mat-red);
		   
		   $custom-theme: mat-light-theme($custom-app-primary, $custom-app-secondary, $custom-app-warn);
		   
		   @include angular-material-theme($custom-theme);
		   
		```

Passo 11:
	- Adicionando serviços ao projeto:
		ng g s <nome do serviço>(pode conter o caminho de onde se pretende criar o serviço)
		
Passo 12(criação de componentes compartilhados):
	- Adicionando um módulo shared:
		ng g m shared
	- Adicionando ao /shared o compomente compartilhado de erros:
		ng g c shared/components/error-dialog
		
Passo 13 (gerando pipes):
	- Gerando pipe na pasta compartilhada /shared:
		ng g pipe shared/pipes/category
		